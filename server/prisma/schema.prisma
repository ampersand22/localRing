datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "darwin", "darwin-arm64"]
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt DateTime     @default(now())
  content   String?
  likes     LikedTweet[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String @db.ObjectId
  comments  Comment[]
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  password   String       @default("")
  name       String?
  kayfabeName String?
  posts     Post[]
  Profile    Profile?
  likedTweet LikedTweet[]
  comments   Comment[]
  Following  Following[]
}

model LikedTweet {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  post    Post    @relation(fields: [postId], references: [id])
  likedAt DateTime @default(now())
  userId  String @db.ObjectId
  User    User?    @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
}

model Following {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  avatar   String
  followId Int
  User     User?  @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
}

model Profile {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  bio       String?
  location  String?
  website   String?
  avatar    String?
  userId    String? @db.ObjectId     @unique
  User      User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  content   String?
  Post     Post?    @relation(fields: [postId], references: [id])
  postId   String? @db.ObjectId
  User      User?     @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  comments  Comment[] @relation("CommentToComment")
  Comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentId String? @db.ObjectId
}


// model Account {
//   id  String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user  User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

//   @@unique([provider, providerAccountId])
// }



// // model Post1 {
// //   id       String    @id @default(auto()) @map("_id") @db.ObjectId
// //   slug     String    @unique
// //   title    String
// //   body     String
// //   author   User      @relation(fields: [authorId], references: [id])
// //   authorId String    @db.ObjectId
// //   comments Comment[]
// // }

// model Post {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime     @default(now())
//   content   String?
//   likes     LikedPost[]
//   author    User?        @relation(fields: [authorId], references: [id])
//   authorId  Int?    
//   comments  Comment[]
// }

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   email     String   @unique
//   password  String   @default("")
//   name      String?
//   posts     Post[]
//   Profile   Profile?
//   likedPost LikedPost[]
//   comments  Comment[]
//   Following Following[]
//   address   Address?
  
// }

// model Comment {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime  @default(now())
//   content   String?
//   Post      Post?    @relation(fields: [postId], references: [id])
//   postId    Int?
//   User      User?     @relation(fields: [userId], references: [id])
//   userId    Int?
//   comments  Comment[] @relation("CommentToComment")
//   Comment   Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
//   commentId Int?
// }

// model LikedPost {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   post    Post    @relation(fields: [postId], references: [id])
//   likedAt DateTime @default(now())
//   userId  Int?
//   User    User?    @relation(fields: [userId], references: [id])
//   postId Int
// }

// model Following {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   avatar   String
//   followId Int
//   User     User?  @relation(fields: [userId], references: [id])
//   userId   Int?
// }

// model Profile {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   bio       String?
//   location  String?
//   website   String?
//   avatar    String?
//   userId    Int?     @unique
//   User      User?    @relation(fields: [userId], references: [id])
// }

// // Address is an embedded document
// type Address {
//   street String
//   city   String
//   state  String
//   zip    String
// }


